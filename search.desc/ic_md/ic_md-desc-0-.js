searchState.loadedDescShard("ic_md", 0, "Driver for the iC-MD quadrature counter. Built fully in …\nThe main driver struct of the crate representing the iC-MD …\nSet the actuator pins output to the given status. Note …\nProvides acces to the underlying device driver.\nReturns the argument unchanged.\nGet current device status. This is a cached value that is …\nGet the full device status by reading all the status …\nInitialize the iC-MD device with the given configuration.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the iC-MD driver. By default, …\nRead the current counter value and return it.\nReset all counters. Can be used to send reset commands to …\nReset counters to zero. You can select which counters …\nSet the counter configuration. This should be done prior …\nTouch probe instruction Load touch probe 2 with touch …\nActuator status. This struct is used to keep track of the …\nCounter 0 = 16 bit; 1 counter; TTL, RS422, or LVDS\nCounter 0 = 24 bit; 1 counter; TTL, RS422, or LVDS\nCounter 0 = 32 bit; 1 counter; TTL, RS422, or LVDS\nCounter 0 = 48 bit; 1 counter; TTL, RS422, or LVDS\nCounter 0 = 16 bit and Counter 1 = 16 bit; 2 counters; TTL …\nCounter 0 = 24 bit and Counter 1 = 24 bit; 2 counters; TTL …\nCounter 0 = 32 bit and Counter 1 = 16 bit; 2 counters; TTL …\nCounter 0 = 16 bit, Counter 1 = 16 bit, and Counter 2 = 16 …\nCounter configuration The iC-MD can be configured for 1 up …\nRepresent the counter values for different configurations …\nEnum to specify the direction in which a counter counts …\nSetup for a specific counter. Use this struct to declare …\nEnum to specify if the Z signal is normal or inverted\nCommuniucatoion Status This enum indicates if the …\nDecodification Status A DecodificationError indicates that …\nDevice Status This struct describes the status of the …\nError Status Enum that indicates if an error has occured …\nFull Device Status This struct contains the full status of …\nInterface Status This enum indicates if an interface is …\nThe device is running normally and has not been reset due …\nOverflow Status\nStatus enum for pins. <code>PinStatus::High</code> means that the pin …\nRegister Status This enum indicates if a register is valid …\nTouch probe Status This enum indicates if the TPx …\nThe device has been reset due to undervoltage.\nPower Status If VDD falls below the power off supply …\nWarning Status Enum that indicates if a warning has …\nZero Status This enum indicates if the counter has reached …\nDecodification error of AB inputs in counter 0\nOverflow of counter 0\nZero status of counter 0\nDecodification error of AB inputs in counter 1\nOverflow of counter 1\nZero status of counter 1\nDecodification error of AB inputs in counter 2\nOverflow of counter 2\nZero status of counter 2\nCommunication status: Has a communication collision …\nExternal error status: Has an external error occured?\nExternal warning status: Has an external warning occured?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the value of the counter zero If it exists, this will …\nGet the value of the counter one If it exists, this will …\nGet the value of counter two. If it exists, this will …\nGet the current error status.\nGet the current warning status.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn <code>true</code> if the device has no errors or warnings, false …\nCreate a new counter setup with the given direction and Z …\nPower status: Has an undervoltage reset occured?\nReference counter status.\nReference register status: Is the reference register valid?\nSSI enabled status: Is the SSI interface enabled?\nTPI pin status\nUPD register status: Is the UPD register valid?\nRoot block of the Device driver\nLow level interface error that wraps the SPI error\nThe SPI Device wrapper interface to the driver\nCounter configuration The iC-MD can be configured for 1 up …\nModule containing the generated fieldsets of the registers …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruction byte (write only) Allows writing of the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new instance of the block based on device …\nConstruct a new instance of the device.\nRead all readable register values in this block from the …\nRead all readable register values in this block from the …\nRead the 24 bit counter configuration, 24+2 bits to read …\nRead the 24 bit, 2 counters configuration, 48+2 bits to …\nRead the 48 bit counter register, 48+2 bits to read (7 …\nRead the 16 bit counter configuration, 16+2 bits to read …\nRead the 32 bit counter configuration, 32+2 bits to read …\nRead the 32 bit and 16 bit counter configuration, 32+16+2 …\nRead the 16 bit and 16 bit counter configuration, 16+16+2 …\nRead the 3 x 16 bit counter configuration, 16+16+16+2 bits …\nRead the references registers 24 bits. TODO: It is unclear …\n<code>Status0</code>: Status of counter 0 Returns the status of counter …\n<code>Status1</code>: Status of counter 1 Returns the status of counter …\n<code>Status2</code>: Status of counter 2 Returns the status of counter …\nCounter configuration The iC-MD can be configured for 1 up …\nCounter configuration The iC-MD can be configured for 1 up …\nEnum containing all possible field set types\nInstruction byte (write only) Allows writing of the …\nInstruction byte (write only) Allows writing of the …\nRead the 24 bit counter configuration, 24+2 bits to read …\nRead the 24 bit counter configuration, 24+2 bits to read …\nRead the 24 bit, 2 counters configuration, 48+2 bits to …\nRead the 24 bit, 2 counters configuration, 48+2 bits to …\nRead the 48 bit counter register, 48+2 bits to read (7 …\nRead the 48 bit counter register, 48+2 bits to read (7 …\nRead the 16 bit counter configuration, 16+2 bits to read …\nRead the 16 bit counter configuration, 16+2 bits to read …\nRead the 32 bit counter configuration, 32+2 bits to read …\nRead the 32 bit counter configuration, 32+2 bits to read …\nRead the 32 bit and 16 bit counter configuration, 32+16+2 …\nRead the 32 bit and 16 bit counter configuration, 32+16+2 …\nRead the 16 bit and 16 bit counter configuration, 16+16+2 …\nRead the 16 bit and 16 bit counter configuration, 16+16+2 …\nRead the 3 x 16 bit counter configuration, 16+16+16+2 bits …\nRead the 3 x 16 bit counter configuration, 16+16+16+2 bits …\nRead the references registers 24 bits. TODO: It is unclear …\nRead the references registers 24 bits. TODO: It is unclear …\n<code>Status0</code>: Status of counter 0 Returns the status of counter …\n<code>Status0</code>: Status of counter 0 Returns the status of counter …\n<code>Status1</code>: Status of counter 1 Returns the status of counter …\n<code>Status1</code>: Status of counter 1 Returns the status of counter …\n<code>Status2</code>: Status of counter 2 Returns the status of counter …\n<code>Status2</code>: Status of counter 2 Returns the status of counter …\nRead the <code>ab_err_0</code> field of the register.\nRead the <code>ab_err_1</code> field of the register.\nRead the <code>ab_err_2</code> field of the register.\nRead the <code>ab_res_0</code> field of the register.\nRead the <code>ab_res_1</code> field of the register.\nRead the <code>ab_res_2</code> field of the register.\nRead the <code>act_0</code> field of the register.\nRead the <code>act_1</code> field of the register.\nRead the <code>cnt_0</code> field of the register.\nRead the <code>cnt_0</code> field of the register.\nRead the <code>cnt_0</code> field of the register.\nRead the <code>cnt_0</code> field of the register.\nRead the <code>cnt_0</code> field of the register.\nRead the <code>cnt_0</code> field of the register.\nRead the <code>cnt_0</code> field of the register.\nRead the <code>cnt_0</code> field of the register.\nRead the <code>cnt_1</code> field of the register.\nRead the <code>cnt_1</code> field of the register.\nRead the <code>cnt_1</code> field of the register.\nRead the <code>cnt_1</code> field of the register.\nRead the <code>cnt_2</code> field of the register.\nRead the <code>com_col</code> field of the register.\nRead the <code>com_col</code> field of the register.\nRead the <code>en_ssi</code> field of the register.\nRead the <code>ext_err</code> field of the register.\nRead the <code>ext_err</code> field of the register.\nRead the <code>ext_warn</code> field of the register.\nRead the <code>ext_warn</code> field of the register.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRead the <code>nerr</code> field of the register.\nRead the <code>nerr</code> field of the register.\nRead the <code>nerr</code> field of the register.\nRead the <code>nerr</code> field of the register.\nRead the <code>nerr</code> field of the register.\nRead the <code>nerr</code> field of the register.\nRead the <code>nerr</code> field of the register.\nRead the <code>nerr</code> field of the register.\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with the reset value (if any)\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nCreate a new instance, loaded with all zeroes\nRead the <code>nwarn</code> field of the register.\nRead the <code>nwarn</code> field of the register.\nRead the <code>nwarn</code> field of the register.\nRead the <code>nwarn</code> field of the register.\nRead the <code>nwarn</code> field of the register.\nRead the <code>nwarn</code> field of the register.\nRead the <code>nwarn</code> field of the register.\nRead the <code>nwarn</code> field of the register.\nRead the <code>ovf_0</code> field of the register.\nRead the <code>ovf_1</code> field of the register.\nRead the <code>ovf_2</code> field of the register.\nRead the <code>ovf_ref</code> field of the register.\nRead the <code>p_dwn</code> field of the register.\nRead the <code>p_dwn</code> field of the register.\nRead the <code>p_dwn</code> field of the register.\nRead the <code>r_val</code> field of the register.\nWrite the <code>ab_err_0</code> field of the register.\nWrite the <code>ab_err_1</code> field of the register.\nWrite the <code>ab_err_2</code> field of the register.\nWrite the <code>ab_res_0</code> field of the register.\nWrite the <code>ab_res_1</code> field of the register.\nWrite the <code>ab_res_2</code> field of the register.\nWrite the <code>act_0</code> field of the register.\nWrite the <code>act_1</code> field of the register.\nWrite the <code>cnt_0</code> field of the register.\nWrite the <code>cnt_0</code> field of the register.\nWrite the <code>cnt_0</code> field of the register.\nWrite the <code>cnt_0</code> field of the register.\nWrite the <code>cnt_0</code> field of the register.\nWrite the <code>cnt_0</code> field of the register.\nWrite the <code>cnt_0</code> field of the register.\nWrite the <code>cnt_0</code> field of the register.\nWrite the <code>cnt_1</code> field of the register.\nWrite the <code>cnt_1</code> field of the register.\nWrite the <code>cnt_1</code> field of the register.\nWrite the <code>cnt_1</code> field of the register.\nWrite the <code>cnt_2</code> field of the register.\nWrite the <code>com_col</code> field of the register.\nWrite the <code>com_col</code> field of the register.\nWrite the <code>en_ssi</code> field of the register.\nWrite the <code>ext_err</code> field of the register.\nWrite the <code>ext_err</code> field of the register.\nWrite the <code>ext_warn</code> field of the register.\nWrite the <code>ext_warn</code> field of the register.\nWrite the <code>nerr</code> field of the register.\nWrite the <code>nerr</code> field of the register.\nWrite the <code>nerr</code> field of the register.\nWrite the <code>nerr</code> field of the register.\nWrite the <code>nerr</code> field of the register.\nWrite the <code>nerr</code> field of the register.\nWrite the <code>nerr</code> field of the register.\nWrite the <code>nerr</code> field of the register.\nWrite the <code>nwarn</code> field of the register.\nWrite the <code>nwarn</code> field of the register.\nWrite the <code>nwarn</code> field of the register.\nWrite the <code>nwarn</code> field of the register.\nWrite the <code>nwarn</code> field of the register.\nWrite the <code>nwarn</code> field of the register.\nWrite the <code>nwarn</code> field of the register.\nWrite the <code>nwarn</code> field of the register.\nWrite the <code>ovf_0</code> field of the register.\nWrite the <code>ovf_1</code> field of the register.\nWrite the <code>ovf_2</code> field of the register.\nWrite the <code>ovf_ref</code> field of the register.\nWrite the <code>p_dwn</code> field of the register.\nWrite the <code>p_dwn</code> field of the register.\nWrite the <code>p_dwn</code> field of the register.\nWrite the <code>r_val</code> field of the register.\nWrite the <code>tp</code> field of the register.\nWrite the <code>tp_val</code> field of the register.\nWrite the <code>tps</code> field of the register.\nWrite the <code>upd_val</code> field of the register.\nWrite the <code>value</code> field of the register.\nWrite the <code>value</code> field of the register.\nWrite the <code>zc_en</code> field of the register.\nWrite the <code>zero_0</code> field of the register.\nWrite the <code>zero_1</code> field of the register.\nWrite the <code>zero_2</code> field of the register.\nRead the <code>tp</code> field of the register.\nRead the <code>tp_val</code> field of the register.\nRead the <code>tps</code> field of the register.\nRead the <code>upd_val</code> field of the register.\nRead the <code>value</code> field of the register.\nRead the <code>value</code> field of the register.\nRead the <code>zc_en</code> field of the register.\nRead the <code>zero_0</code> field of the register.\nRead the <code>zero_1</code> field of the register.\nRead the <code>zero_2</code> field of the register.")