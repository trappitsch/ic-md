searchState.loadedDescShard("miette", 0, "You run miette? You run her code like the software? Oh. …\nJust some help. Here’s how you could be doing it better.\n“Raw” type for the byte offset from the beginning of a …\nCompatibility re-export of <code>WrapErr</code> for interop with <code>anyhow</code> …\n<code>ReportHandler</code> that renders plain text and avoids …\nAdds rich metadata to your Error that can be used by <code>Report</code>…\nContains the error value\nCompatibility re-export of <code>Report</code> for interop with <code>anyhow</code> …\nCritical failure. The program cannot continue. This is the …\nError indicating that <code>set_hook()</code> was unable to install the …\nConvenience trait that adds a <code>.into_diagnostic()</code> method …\nWrapper around <code>std::io::Error</code>. This is returned when …\n<code>ReportHandler</code> that renders JSON output. It’s a …\nA labeled <code>SourceSpan</code>.\nDiagnostic that can be created at runtime.\nError enum for miette. Used by certain operations in the …\nBasic implementation of the <code>SpanContents</code> trait, for …\nUtility struct for when you have a regular <code>SourceCode</code> type …\n<code>ReportHandler</code> that renders plain text and avoids …\nContains the success value\nReturned when a <code>SourceSpan</code> extends beyond the bounds of a …\nCore Diagnostic wrapper type.\nError Report Handler trait for customizing <code>miette::Report</code>\ntype alias for <code>Result&lt;T, Report&gt;</code>\n<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …\nRepresents readable source code of some sort.\nNewtype that represents the <code>ByteOffset</code> from the beginning …\nSpan within a <code>SourceCode</code>\nContents of a <code>SourceCode</code> covered by <code>SourceSpan</code>.\nWarning. Please take note.\nProvides the <code>wrap_err()</code> method for <code>Result</code>.\nReturn new diagnostic with new label added to the existing …\nReturn new diagnostic with new labels added to the …\nMakes a new label at specified span\nMakes a new label that points at a specific offset.\nReturn early with an error.\nAn iterator of the chain of source errors contained by …\nUnique diagnostic code that can be used to look up more …\nUnique diagnostic code that can be used to look up more …\nUnique diagnostic code to look up more information about …\nThe 0-indexed column in the associated <code>SourceCode</code> where …\nCompatibility re-export of <code>wrap_err()</code> for interop with …\nCompatibility re-export of <code>wrap_err()</code> for interop with …\nCompatibility re-export of <code>wrap_err</code> for interop with <code>anyhow</code>\nReference to the data inside the associated span, in bytes.\nDefine the report format\nConstruct a <code>MietteDiagnostic</code> in more user-friendly way.\nThe cause of the error.\nThe cause of the error.\nOverride for the <code>Display</code> format\nOverride for the <code>Display</code> format\nAttempt to downcast the error object to a concrete type.\nDowncast this error object by mutable reference.\nDowncast this error object by reference.\nReturn early with an error if a condition is not satisfied.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPanics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an offset for the <em>file</em> location of wherever this …\nConstruct a <code>Report</code> directly from an error-like type\nLittle utility to help convert 1-based line/column …\nGet a reference to the Handler for this Report.\nGet a mutable reference to the Handler for this Report.\nAdditional help text related to this <code>Diagnostic</code>. Do you …\nAdditional help text related to this <code>Diagnostic</code>. Do you …\nAdditional help text related to this Diagnostic\nReturns a reference the inner <code>SourceCode</code> type for this …\nReturns a reference to the inner <code>SourceSpan</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>Result</code> types that return regular <code>std::error::Error</code>…\nReturns true if <code>E</code> is the type held by this error object.\nTrue if this <code>LabeledSpan</code> is empty.\nWhether this <code>SourceSpan</code> has a length of zero. It may still …\nGets the (optional) label string for this <code>LabeledSpan</code>.\nLabels to apply to this <code>Diagnostic</code>’s …\nLabels to apply to this <code>Diagnostic</code>’s …\nLabels to apply to this <code>Diagnostic</code>’s …\nOptional method. The language name for this source code, …\nOptional method. The language name for this source code, …\nReturns the number of bytes this <code>LabeledSpan</code> spans.\nTotal length of the <code>SourceSpan</code>, in bytes.\nThe 0-indexed line in the associated <code>SourceCode</code> where the …\nTotal number of lines covered by this <code>SpanContents</code>.\nDisplayed diagnostic message\nConstruct an ad-hoc <code>Report</code>.\nCreate a new error object from a printable error message.\nAn optional (file?) name for the container of this …\nAn optional (file?) name for the container of this …\nGets the name of this <code>NamedSource</code>.\nCreate a new error object from any error type.\nCreate a new <code>NarratableReportHandler</code> There are no …\nCreate a new <code>JSONReportHandler</code>. There are no customization …\nCreate a new <code>NarratableReportHandler</code>. There are no …\nCreate a new dynamic diagnostic with the given message.\nCreate a new <code>NamedSource</code> using a regular <code>SourceCode</code> and …\nMakes a new labeled span.\nMake a new <code>MietteSpanContents</code> object.\nCreate a new <code>SourceSpan</code>.\nCreate a new error object from a boxed <code>Diagnostic</code>.\nMake a new <code>MietteSpanContents</code> object, with a name for its …\nMakes a new labeled primary span using an existing span.\nMakes a new labeled span using an existing span.\nReturns the 0-based starting byte offset.\nThe absolute offset, in bytes, from the beginning of a …\nActual byte offset.\nTrue if this <code>LabeledSpan</code> is a primary span.\nRead the bytes for a specific span from this <code>SourceCode</code>, …\nAdditional related <code>Diagnostic</code>s.\nAdditional related <code>Diagnostic</code>s.\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nRender a <code>Diagnostic</code>. This function is mostly internal and …\nThe lowest level cause of this error — this error’s …\nSet the error hook.\nChange the text of the label\nDiagnostic severity. This may be used by <code>ReportHandler</code>s to …\nDiagnostic severity. This may be used by <code>ReportHandler</code>s to …\n<code>Diagnostic</code> severity. Intended to be used by <code>ReportHandler</code>s …\nSource code to apply this <code>Diagnostic</code>’s <code>Diagnostic::labels</code>…\nSource code to apply this <code>Diagnostic</code>’s <code>Diagnostic::labels</code>…\n<code>SourceSpan</code> representing the span covered by this …\nStore the location of the caller who constructed this …\nStore the location of the caller who constructed this …\nMakes a new label without text, that underlines a specific …\nURL to visit for a more detailed explanation/help about …\nURL to visit for a more detailed explanation/help about …\nURL to visit for a more detailed explanation/help about …\nInclude the cause chain of the top-level error in the …\nReturn new diagnostic with the given code.\nCompatibility re-export of <code>wrap_err_with()</code> for interop …\nCompatibility re-export of <code>wrap_err_with()</code> for interop …\nSets the number of lines of context to show around each …\nSet the footer to be displayed at the end of the report.\nReturn new diagnostic with the given help message.\nReturn new diagnostic with the given label.\nReturn new diagnostic with the given labels.\nSets the <code>language</code> for this source code.\nSets the <code>language</code> for syntax highlighting.\nReturn new diagnostic with the given severity.\nProvide source code for this error\nReturn new diagnostic with the given URL.\nDo not include the cause chain of the top-level error in …\nWrap the error value with a new adhoc error\nWrap the error value with a new adhoc error\nCreate a new error from an error message to wrap the …\nWrap the error value with a new adhoc error that is …\nWrap the error value with a new adhoc error that is …")